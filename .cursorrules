# Coin Trading 프로젝트 Cursor 규칙

## 🔴 중요 규칙 (CRITICAL RULES)

### 언어 설정
- **모든 답변은 한글로 작성**

### 데이터베이스 보호
- **절대 금지**: 데이터베이스 초기화 또는 전체 삭제 작업
- **절대 금지**: DROP TABLE, TRUNCATE TABLE 등 데이터 손실 가능성이 있는 SQL 실행
- **허용**: 개별 컬럼 추가 ALTER TABLE 명령어
- **허용**: 인덱스 생성/삭제
- **반드시 확인**: 중요한 스키마 변경 전 사용자 승인 필요

### 코드 품질 절대 규칙
- **🚫 ESLint Disable 절대 금지**:
  - `eslint-disable`, `eslint-disable-line`, `eslint-disable-next-line` 절대 사용 금지
  - `// @ts-ignore`, `// @ts-nocheck` 등 TypeScript 체크 비활성화 금지
  - **모든 린트 에러는 반드시 코드 수정으로만 해결**
- 코드 수정 후에는 반드시 `npm run lint` 실행하여 에러 확인 및 수정
- 린트 에러가 있는 상태로 작업 완료 금지

### 파일 구조 규칙

#### SQL 파일 관리
- 모든 Supabase SQL 파일은 `sql/` 폴더에 저장
- 마이그레이션 파일명: `YYYYMMDD_description.sql` 형식 사용
- 파일 내 주석으로 목적과 의존성 명시

#### UI 컴포넌트 규칙
- **필수**: UI 요소 구현 시 `src/components/ui/` 폴더의 공통 컴포넌트 우선 사용
- **DRY 원칙 적용**: 동일한 UI 패턴이 2회 이상 사용되면 즉시 공통 컴포넌트로 추출
- 필요한 컴포넌트가 없을 경우 `src/components/ui/`에 새로운 공통 컴포넌트 생성
- 페이지별 특화 컴포넌트만 페이지 디렉토리에 위치
- 공통 UI 컴포넌트는 variant, size 등의 props로 다양한 케이스 지원
- **예시**: 버튼, 입력 필드, 카드, 모달, 툴팁 등 반복되는 UI 요소는 모두 공통화

#### 문서 관리
- 모든 PRD(Product Requirement Document) 파일은 `.docs/` 폴더에 저장
- 기능 명세서, 요구사항 문서, 설계 문서 등 프로젝트 문서화
- 파일명: `YYYYMMDD_feature_name.md` 형식 권장

## 기술 스택

### 프레임워크 & 언어
- **프레임워크**: Next.js 15 (App Router) with React Server Components
- **언어**: TypeScript (strict mode)
- **스타일링**: Tailwind CSS (커스텀 다크 테마 - Supabase 스타일)
- **데이터베이스**: Supabase (PostgreSQL)
- **인증**: Supabase Auth (Google OAuth)
- **배포**: Vercel

#### Next.js 15 주요 변경사항
**Dynamic Route Params가 Promise로 변경:**
```typescript
// ❌ 잘못된 방식 (Next.js 14 이하)
interface PageProps {
  params: { id: string }
}
export default function Page({ params }: PageProps) {
  const { id } = params
}

// ✅ 올바른 방식 (Next.js 15)
interface PageProps {
  params: Promise<{ id: string }>
}
export default async function Page({ params }: PageProps) {
  const { id } = await params
}
```
- **필수**: 모든 동적 라우트 페이지는 `params`를 `Promise`로 선언
- **필수**: 컴포넌트를 `async function`으로 변경
- **필수**: `await params`로 값 추출

### TypeScript 경로 별칭
`src/`의 모든 임포트에 `@/*` 사용:
```typescript
import { createClient } from '@/lib/supabase/server'
import Button from '@/components/ui/Button'
import ChartControls from '@/components/common/ChartControls'
import type { TimeFrame, Period } from '@/types/chart'
```

## 아키텍처 패턴

### 인증 플로우
1. **OAuth 로그인** (`/login`): Supabase Auth를 통한 Google OAuth
2. **인증 콜백** (`/app/auth/callback/route.ts`):
   - 코드를 세션으로 교환
   - `user_profiles` 레코드가 없으면 자동 생성 (기본값 `user_type: 'quest'`)
3. **보호된 라우트**: `/login`을 제외한 모든 페이지는 `AppLayout`을 통한 인증 필요

### 사용자 타입 시스템
세 가지 사용자 타입과 권한 수준:
- `admin`: `/admin` 사용자 관리 포함 전체 접근 권한
- `member`: 일반 인증 사용자
- `quest`: 신규 사용자 기본값 (게스트 레벨)

사용자 타입은 `user_profiles` 테이블에 저장되며 RLS 정책으로 강제됩니다.

### 레이아웃 아키텍처

#### 중앙 집중식 레이아웃 패턴
- `AppLayout` 컴포넌트가 모든 인증된 페이지를 감싸기
- 인증 체크 처리 및 미인증 시 `/login`으로 리다이렉트
- 사용자 프로필을 가져와서 `Navigation`에 전달
- 모든 페이지에 일관된 max-width (`max-w-7xl`) 설정
- 모든 페이지는 `<AppLayout>{content}</AppLayout>` 래퍼 사용

#### 네비게이션 시스템
- 반응형 디자인: 데스크톱 가로 메뉴, 모바일 햄버거 드롭다운
- 동적 페이지 타이틀: 홈에서는 "Coin Trading", 다른 라우트에서는 페이지 이름 표시
- **페이지 타이틀은 네비게이션으로 대체**: 개별 페이지에서 별도 제목(h1) 불필요
- `parent` 속성으로 계층적 타이틀 지원: "메인 > 서브"
- 하위 라우트 활성화: `/market/*`, `/simulation/*` 등 하위 경로에서도 부모 메뉴 활성화
- 관리자 메뉴 항목은 `user_type: 'admin'`일 때만 표시
- 데스크톱 및 모바일 뷰 모두에 로그아웃 기능 통합

### Supabase 클라이언트 패턴

#### 두 가지 클라이언트 타입
1. **서버 클라이언트** (`@/lib/supabase/server`): Server Components와 Server Actions용
   - 쿠키 통합과 함께 `createServerClient` 사용
   - 비동기 함수: `await createClient()`

2. **브라우저 클라이언트** (`@/lib/supabase/client`): Client Components용
   - `createBrowserClient` 사용
   - 동기 함수: `createClient()`

#### 사용법
- Server Components: 항상 서버 클라이언트 사용
- Client Components: 클라이언트 측 작업에 브라우저 클라이언트 사용
- Server Actions: 변경 작업에 서버 클라이언트 사용

### 컴포넌트 아키텍처

#### DRY 원칙 (Don't Repeat Yourself)
- **필수 규칙**: 2번 이상 사용되는 코드 패턴은 공통 컴포넌트로 추출
- **판단 기준**: 
  - 동일하거나 유사한 UI 패턴이 2곳 이상에서 발견되면 즉시 공통화
  - 향후 재사용 가능성이 있는 패턴도 공통 컴포넌트로 생성 고려
- **위치 결정**:
  - 범용적인 UI 요소 → `src/components/ui/`
  - 도메인 로직이 포함된 재사용 요소 → `src/components/common/`
  - 특정 기능 영역에만 사용 → 해당 기능 폴더 내 공통 컴포넌트
- **이점**: 코드 중복 방지, 유지보수성 향상, 일관된 UI/UX 제공

#### 레이아웃 컴포넌트
- `AppLayout`: 인증 + 네비게이션을 포함한 중앙 집중식 레이아웃
- `Navigation`: 사용자 정보와 로그아웃이 포함된 반응형 네비게이션

#### UI 컴포넌트 (`src/components/ui/`)
- 재사용 가능한 원자 컴포넌트: `Button`, `Input`, `Card`, `Tooltip`
- variant와 size props로 일관된 스타일링
- 모든 컴포넌트는 Tailwind 테마 컬러 사용
- **중요**: 새로운 UI 요소 필요 시 이 폴더에 공통 컴포넌트로 생성
- **2회 이상 사용**: 같은 패턴이 반복되면 반드시 공통 컴포넌트로 추출

#### 공통 컴포넌트 (`src/components/common/`)
- **ChartControls**: 차트 제어 컴포넌트 (기준 날짜, 조회 기간, 타임프레임)
  - Market과 Simulation 페이지에서 공통 사용
  - Props: `onTimeFrameChange`, `onPeriodChange`, `onBaseDateChange`
  - 타입: `@/types/chart`에서 `TimeFrame`, `Period` import

#### 페이지별 컴포넌트
- 페이지 디렉토리에 위치 (예: `/app/my-page/ProfileCard.tsx`)
- **반드시** `src/components/ui/`의 공통 컴포넌트를 사용하여 구성
- 페이지에만 특화된 로직이 있을 때만 별도 컴포넌트 생성
- **중요**: 같은 컴포넌트가 다른 페이지에서도 필요하다면 즉시 `src/components/common/`으로 이동
- **리팩토링 기준**: 2개 이상의 페이지에서 사용 시 공통화 필수

#### 타입 정의
- 공통 타입은 `src/types/` 디렉토리에 정의
- `@/types/chart`: 차트 관련 타입 (`TimeFrame`, `Period`, `ChartControlsConfig`)

### 스타일링 시스템

#### Tailwind 커스텀 테마 (기본 다크 모드)
```javascript
colors: {
  background: '#1c1c1c',      // 메인 배경
  foreground: '#ededed',       // 메인 텍스트
  brand: '#3ecf8e',           // 주요 강조색 (녹색)
  border: '#2e2e2e',          // 기본 테두리
  surface: {
    DEFAULT: '#181818',        // 카드 배경
    75: '#1f1f1f',
    100: '#262626',
  }
}
```

### Server Actions 패턴

#### 변경 작업 패턴
```typescript
const updateProfile = async (formData: FormData) => {
  'use server'
  // 서버 supabase 클라이언트 사용
  const supabase = await createClient()
  // 변경 작업 수행
  // revalidatePath()로 캐시 업데이트
  // redirect()로 네비게이션
}
```

#### 로딩 상태가 있는 폼 제출
```typescript
// 제출 버튼 컴포넌트에서 useFormStatus() 훅 사용
function SubmitButton() {
  const { pending } = useFormStatus()
  return <Button disabled={pending}>{pending ? '저장 중...' : '저장'}</Button>
}
```

### 이미지 설정
허용된 원격 이미지 도메인:
- `https://lh3.googleusercontent.com/a/**` (Google 프로필 사진)

새 도메인은 `next.config.js`의 `remotePatterns` 배열에 추가하세요.

## 주요 개발 패턴

### 새로운 보호된 라우트 추가하기
1. `src/app/[route]/page.tsx`에 페이지 생성
2. `<AppLayout>`으로 컨텐츠 감싸기 (h1 타이틀 불필요)
3. `Navigation` navItems 배열에 라우트 추가
4. 하위 라우트가 있는 경우 `isActive` 함수에 경로 패턴 추가
5. 선택사항: 서브메뉴 브레드크럼을 위한 `parent` 속성 추가

### 주요 페이지 구조
- **Market** (`/market`): 코인 시세 목록 및 상세 정보
  - `/market/[symbol]`: 코인별 상세 페이지 (차트, 지표)
- **Simulation** (`/simulation`): 코인 시뮬레이션 (개발 중)
  - `/simulation/[symbol]`: 코인별 시뮬레이션 상세

### 관리자 전용 기능
다음에서 `user_type === 'admin'` 확인:
- 네비게이션 메뉴 (조건부 렌더링)
- 페이지 레벨 접근 제어 (관리자가 아니면 리다이렉트)
- Server actions (변경 전 user_type 확인)

### Server Actions와 폼 패턴
```typescript
// page.tsx에서 (Server Component)
async function serverAction(formData: FormData) {
  'use server'
  const supabase = await createClient()
  // ... 변경 로직
  revalidatePath('/current-path')
  redirect('/current-path')
}

// 클라이언트 컴포넌트에 전달
<ClientForm action={serverAction} />

// ClientForm에서 (Client Component)
<form action={action}>
  <Input name="field" />
  <SubmitButton /> {/* useFormStatus 사용 */}
</form>
```

### 데이터베이스 스키마 규칙
- 테이블: `user_profiles` (`users`가 아님)
- 사용자 타입 enum: `'admin' | 'member' | 'quest'`
- 보안을 위해 항상 RLS 정책 포함
- 외래 키는 `auth.users(id)`를 참조하며 `ON DELETE CASCADE` 사용

### SQL 파일 관리

#### 파일 위치
모든 SQL 파일은 `sql/` 디렉토리에 저장

#### 파일 명명 규칙
```
sql/
├── YYYYMMDD_initial_schema.sql      # 초기 스키마
├── YYYYMMDD_add_user_types.sql      # 마이그레이션
└── YYYYMMDD_create_indexes.sql      # 인덱스 추가
```

#### SQL 파일 구조
```sql
-- 파일 목적: 사용자 타입 변경
-- 의존성: user_profiles 테이블 필요
-- 작성일: 2024-01-01

-- 기존 제약 조건 삭제
ALTER TABLE user_profiles DROP CONSTRAINT IF EXISTS ...;

-- 데이터 마이그레이션
UPDATE user_profiles SET ...;

-- 새 제약 조건 추가
ALTER TABLE user_profiles ADD CONSTRAINT ...;
```

## 개발 명령어

### 일반 개발
```bash
npm run dev              # 개발 서버 시작 (http://localhost:3000)
npm run build           # 프로덕션 빌드
npm start               # 프로덕션 서버 시작
npm run lint            # ESLint 실행
```

### Git 배포 전 필수 체크리스트
**반드시 순서대로 실행하고 모두 통과해야 git push 가능:**
```bash
# 1. 린트 체크
npm run lint

# 2. 타입 체크
npx tsc --noEmit

# 3. 빌드 체크
npm run build
```

**모든 체크가 통과한 후에만 git push 진행:**
- ✅ 린트 에러 0개
- ✅ 타입 에러 0개  
- ✅ 빌드 성공
- ❌ 에러가 하나라도 있으면 push 금지

### 문제 해결
```bash
# 캐시 삭제 (핫 리로드 실패 시)
rm -rf .next && npm run dev

# 모든 개발 서버 종료
for port in 3000 3001 3002 4000 5000 5173 8000 8080 8081 9000; do
  lsof -ti:$port | xargs kill -9 2>/dev/null
done
```

## 환경 변수

`.env.local`에 필수 항목:
```
NEXT_PUBLIC_SUPABASE_URL=your_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
```

## 일반적인 문제 해결

### 핫 리로드가 작동하지 않을 때
```bash
rm -rf .next && npm run dev
```

### 여러 개발 서버가 실행 중일 때
위의 포트 종료 명령어 사용

### 인증 리다이렉트 루프
`user_profiles` 테이블이 존재하고 RLS 정책이 읽기 접근을 허용하는지 확인

### 이미지가 로드되지 않을 때
`next.config.js`의 remotePatterns에 도메인이 있는지 확인

## 코딩 규칙 요약

1. ✅ 항상 한글로 답변
2. ✅ TypeScript strict mode 준수
3. ✅ ESLint 규칙 준수 (disable 금지)
4. ✅ 공통 UI 컴포넌트 우선 사용
5. ✅ **DRY 원칙**: 2번 이상 사용되는 패턴은 공통 컴포넌트로 추출
6. ✅ Server/Client 컴포넌트 적절히 구분
7. ✅ Supabase 클라이언트 패턴 준수
8. ✅ `@/*` 경로 별칭 사용
9. ✅ Tailwind 테마 컬러 사용
10. ✅ Next.js 15 dynamic params는 Promise로 처리
11. ✅ Git push 전 반드시 lint → tsc → build 체크
12. ❌ DB 삭제/초기화 금지 (사용자 확인 필수)
13. ❌ ESLint/TypeScript 체크 비활성화 금지

